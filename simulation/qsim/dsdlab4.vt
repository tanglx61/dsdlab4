// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2017 15:16:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g58_testbed
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g58_testbed_vlg_sample_tst(
	clk,
	deal_button,
	disp_mode_left,
	disp_mode_right,
	mode,
	rst,
	stack_button,
	sampler_tx
);
input  clk;
input  deal_button;
input  disp_mode_left;
input  disp_mode_right;
input [1:0] mode;
input  rst;
input  stack_button;
output sampler_tx;

reg sample;
time current_time;
always @(clk or deal_button or disp_mode_left or disp_mode_right or mode or rst or stack_button)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g58_testbed_vlg_check_tst (
	empty,
	full,
	num,
	req_deal,
	segs_card_rank,
	segs_card_suit,
	value,
	sampler_rx
);
input  empty;
input  full;
input [5:0] num;
input  req_deal;
input [6:0] segs_card_rank;
input [6:0] segs_card_suit;
input [5:0] value;
input sampler_rx;

reg  empty_expected;
reg  full_expected;
reg [5:0] num_expected;
reg  req_deal_expected;
reg [6:0] segs_card_rank_expected;
reg [6:0] segs_card_suit_expected;
reg [5:0] value_expected;

reg  empty_prev;
reg  full_prev;
reg [5:0] num_prev;
reg  req_deal_prev;
reg [6:0] segs_card_rank_prev;
reg [6:0] segs_card_suit_prev;
reg [5:0] value_prev;

reg  empty_expected_prev;
reg  full_expected_prev;
reg [5:0] num_expected_prev;
reg  req_deal_expected_prev;
reg [6:0] segs_card_rank_expected_prev;
reg [6:0] segs_card_suit_expected_prev;
reg [5:0] value_expected_prev;

reg  last_empty_exp;
reg  last_full_exp;
reg [5:0] last_num_exp;
reg  last_req_deal_exp;
reg [6:0] last_segs_card_rank_exp;
reg [6:0] last_segs_card_suit_exp;
reg [5:0] last_value_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	empty_prev = empty;
	full_prev = full;
	num_prev = num;
	req_deal_prev = req_deal;
	segs_card_rank_prev = segs_card_rank;
	segs_card_suit_prev = segs_card_suit;
	value_prev = value;
end

// update expected /o prevs

always @(trigger)
begin
	empty_expected_prev = empty_expected;
	full_expected_prev = full_expected;
	num_expected_prev = num_expected;
	req_deal_expected_prev = req_deal_expected;
	segs_card_rank_expected_prev = segs_card_rank_expected;
	segs_card_suit_expected_prev = segs_card_suit_expected;
	value_expected_prev = value_expected;
end


// expected num[ 5 ]
initial
begin
	num_expected[5] = 1'bX;
end 
// expected num[ 4 ]
initial
begin
	num_expected[4] = 1'bX;
end 
// expected num[ 3 ]
initial
begin
	num_expected[3] = 1'bX;
end 
// expected num[ 2 ]
initial
begin
	num_expected[2] = 1'bX;
end 
// expected num[ 1 ]
initial
begin
	num_expected[1] = 1'bX;
end 
// expected num[ 0 ]
initial
begin
	num_expected[0] = 1'bX;
end 
// expected value[ 5 ]
initial
begin
	value_expected[5] = 1'bX;
end 
// expected value[ 4 ]
initial
begin
	value_expected[4] = 1'bX;
end 
// expected value[ 3 ]
initial
begin
	value_expected[3] = 1'bX;
end 
// expected value[ 2 ]
initial
begin
	value_expected[2] = 1'bX;
end 
// expected value[ 1 ]
initial
begin
	value_expected[1] = 1'bX;
end 
// expected value[ 0 ]
initial
begin
	value_expected[0] = 1'bX;
end 
// expected segs_card_rank[ 6 ]
initial
begin
	segs_card_rank_expected[6] = 1'bX;
end 
// expected segs_card_rank[ 5 ]
initial
begin
	segs_card_rank_expected[5] = 1'bX;
end 
// expected segs_card_rank[ 4 ]
initial
begin
	segs_card_rank_expected[4] = 1'bX;
end 
// expected segs_card_rank[ 3 ]
initial
begin
	segs_card_rank_expected[3] = 1'bX;
end 
// expected segs_card_rank[ 2 ]
initial
begin
	segs_card_rank_expected[2] = 1'bX;
end 
// expected segs_card_rank[ 1 ]
initial
begin
	segs_card_rank_expected[1] = 1'bX;
end 
// expected segs_card_rank[ 0 ]
initial
begin
	segs_card_rank_expected[0] = 1'bX;
end 
// expected segs_card_suit[ 6 ]
initial
begin
	segs_card_suit_expected[6] = 1'bX;
end 
// expected segs_card_suit[ 5 ]
initial
begin
	segs_card_suit_expected[5] = 1'bX;
end 
// expected segs_card_suit[ 4 ]
initial
begin
	segs_card_suit_expected[4] = 1'bX;
end 
// expected segs_card_suit[ 3 ]
initial
begin
	segs_card_suit_expected[3] = 1'bX;
end 
// expected segs_card_suit[ 2 ]
initial
begin
	segs_card_suit_expected[2] = 1'bX;
end 
// expected segs_card_suit[ 1 ]
initial
begin
	segs_card_suit_expected[1] = 1'bX;
end 
// expected segs_card_suit[ 0 ]
initial
begin
	segs_card_suit_expected[0] = 1'bX;
end 

// expected empty
initial
begin
	empty_expected = 1'bX;
end 

// expected full
initial
begin
	full_expected = 1'bX;
end 

// expected req_deal
initial
begin
	req_deal_expected = 1'bX;
end 
// generate trigger
always @(empty_expected or empty or full_expected or full or num_expected or num or req_deal_expected or req_deal or segs_card_rank_expected or segs_card_rank or segs_card_suit_expected or segs_card_suit or value_expected or value)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected empty = %b | expected full = %b | expected num = %b | expected req_deal = %b | expected segs_card_rank = %b | expected segs_card_suit = %b | expected value = %b | ",empty_expected_prev,full_expected_prev,num_expected_prev,req_deal_expected_prev,segs_card_rank_expected_prev,segs_card_suit_expected_prev,value_expected_prev);
	$display("| real empty = %b | real full = %b | real num = %b | real req_deal = %b | real segs_card_rank = %b | real segs_card_suit = %b | real value = %b | ",empty_prev,full_prev,num_prev,req_deal_prev,segs_card_rank_prev,segs_card_suit_prev,value_prev);
`endif
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_full_exp = full_expected_prev;
	end
	if (
		( num_expected_prev[0] !== 1'bx ) && ( num_prev[0] !== num_expected_prev[0] )
		&& ((num_expected_prev[0] !== last_num_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[0] = num_expected_prev[0];
	end
	if (
		( num_expected_prev[1] !== 1'bx ) && ( num_prev[1] !== num_expected_prev[1] )
		&& ((num_expected_prev[1] !== last_num_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[1] = num_expected_prev[1];
	end
	if (
		( num_expected_prev[2] !== 1'bx ) && ( num_prev[2] !== num_expected_prev[2] )
		&& ((num_expected_prev[2] !== last_num_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[2] = num_expected_prev[2];
	end
	if (
		( num_expected_prev[3] !== 1'bx ) && ( num_prev[3] !== num_expected_prev[3] )
		&& ((num_expected_prev[3] !== last_num_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[3] = num_expected_prev[3];
	end
	if (
		( num_expected_prev[4] !== 1'bx ) && ( num_prev[4] !== num_expected_prev[4] )
		&& ((num_expected_prev[4] !== last_num_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[4] = num_expected_prev[4];
	end
	if (
		( num_expected_prev[5] !== 1'bx ) && ( num_prev[5] !== num_expected_prev[5] )
		&& ((num_expected_prev[5] !== last_num_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[5] = num_expected_prev[5];
	end
	if (
		( req_deal_expected_prev !== 1'bx ) && ( req_deal_prev !== req_deal_expected_prev )
		&& ((req_deal_expected_prev !== last_req_deal_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port req_deal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", req_deal_expected_prev);
		$display ("     Real value = %b", req_deal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_req_deal_exp = req_deal_expected_prev;
	end
	if (
		( segs_card_rank_expected_prev[0] !== 1'bx ) && ( segs_card_rank_prev[0] !== segs_card_rank_expected_prev[0] )
		&& ((segs_card_rank_expected_prev[0] !== last_segs_card_rank_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_rank[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_rank_expected_prev);
		$display ("     Real value = %b", segs_card_rank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segs_card_rank_exp[0] = segs_card_rank_expected_prev[0];
	end
	if (
		( segs_card_rank_expected_prev[1] !== 1'bx ) && ( segs_card_rank_prev[1] !== segs_card_rank_expected_prev[1] )
		&& ((segs_card_rank_expected_prev[1] !== last_segs_card_rank_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_rank[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_rank_expected_prev);
		$display ("     Real value = %b", segs_card_rank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segs_card_rank_exp[1] = segs_card_rank_expected_prev[1];
	end
	if (
		( segs_card_rank_expected_prev[2] !== 1'bx ) && ( segs_card_rank_prev[2] !== segs_card_rank_expected_prev[2] )
		&& ((segs_card_rank_expected_prev[2] !== last_segs_card_rank_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_rank[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_rank_expected_prev);
		$display ("     Real value = %b", segs_card_rank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segs_card_rank_exp[2] = segs_card_rank_expected_prev[2];
	end
	if (
		( segs_card_rank_expected_prev[3] !== 1'bx ) && ( segs_card_rank_prev[3] !== segs_card_rank_expected_prev[3] )
		&& ((segs_card_rank_expected_prev[3] !== last_segs_card_rank_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_rank[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_rank_expected_prev);
		$display ("     Real value = %b", segs_card_rank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segs_card_rank_exp[3] = segs_card_rank_expected_prev[3];
	end
	if (
		( segs_card_rank_expected_prev[4] !== 1'bx ) && ( segs_card_rank_prev[4] !== segs_card_rank_expected_prev[4] )
		&& ((segs_card_rank_expected_prev[4] !== last_segs_card_rank_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_rank[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_rank_expected_prev);
		$display ("     Real value = %b", segs_card_rank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segs_card_rank_exp[4] = segs_card_rank_expected_prev[4];
	end
	if (
		( segs_card_rank_expected_prev[5] !== 1'bx ) && ( segs_card_rank_prev[5] !== segs_card_rank_expected_prev[5] )
		&& ((segs_card_rank_expected_prev[5] !== last_segs_card_rank_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_rank[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_rank_expected_prev);
		$display ("     Real value = %b", segs_card_rank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segs_card_rank_exp[5] = segs_card_rank_expected_prev[5];
	end
	if (
		( segs_card_rank_expected_prev[6] !== 1'bx ) && ( segs_card_rank_prev[6] !== segs_card_rank_expected_prev[6] )
		&& ((segs_card_rank_expected_prev[6] !== last_segs_card_rank_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_rank[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_rank_expected_prev);
		$display ("     Real value = %b", segs_card_rank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segs_card_rank_exp[6] = segs_card_rank_expected_prev[6];
	end
	if (
		( segs_card_suit_expected_prev[0] !== 1'bx ) && ( segs_card_suit_prev[0] !== segs_card_suit_expected_prev[0] )
		&& ((segs_card_suit_expected_prev[0] !== last_segs_card_suit_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_suit[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_suit_expected_prev);
		$display ("     Real value = %b", segs_card_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segs_card_suit_exp[0] = segs_card_suit_expected_prev[0];
	end
	if (
		( segs_card_suit_expected_prev[1] !== 1'bx ) && ( segs_card_suit_prev[1] !== segs_card_suit_expected_prev[1] )
		&& ((segs_card_suit_expected_prev[1] !== last_segs_card_suit_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_suit[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_suit_expected_prev);
		$display ("     Real value = %b", segs_card_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segs_card_suit_exp[1] = segs_card_suit_expected_prev[1];
	end
	if (
		( segs_card_suit_expected_prev[2] !== 1'bx ) && ( segs_card_suit_prev[2] !== segs_card_suit_expected_prev[2] )
		&& ((segs_card_suit_expected_prev[2] !== last_segs_card_suit_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_suit[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_suit_expected_prev);
		$display ("     Real value = %b", segs_card_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segs_card_suit_exp[2] = segs_card_suit_expected_prev[2];
	end
	if (
		( segs_card_suit_expected_prev[3] !== 1'bx ) && ( segs_card_suit_prev[3] !== segs_card_suit_expected_prev[3] )
		&& ((segs_card_suit_expected_prev[3] !== last_segs_card_suit_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_suit[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_suit_expected_prev);
		$display ("     Real value = %b", segs_card_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segs_card_suit_exp[3] = segs_card_suit_expected_prev[3];
	end
	if (
		( segs_card_suit_expected_prev[4] !== 1'bx ) && ( segs_card_suit_prev[4] !== segs_card_suit_expected_prev[4] )
		&& ((segs_card_suit_expected_prev[4] !== last_segs_card_suit_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_suit[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_suit_expected_prev);
		$display ("     Real value = %b", segs_card_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segs_card_suit_exp[4] = segs_card_suit_expected_prev[4];
	end
	if (
		( segs_card_suit_expected_prev[5] !== 1'bx ) && ( segs_card_suit_prev[5] !== segs_card_suit_expected_prev[5] )
		&& ((segs_card_suit_expected_prev[5] !== last_segs_card_suit_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_suit[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_suit_expected_prev);
		$display ("     Real value = %b", segs_card_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segs_card_suit_exp[5] = segs_card_suit_expected_prev[5];
	end
	if (
		( segs_card_suit_expected_prev[6] !== 1'bx ) && ( segs_card_suit_prev[6] !== segs_card_suit_expected_prev[6] )
		&& ((segs_card_suit_expected_prev[6] !== last_segs_card_suit_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segs_card_suit[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segs_card_suit_expected_prev);
		$display ("     Real value = %b", segs_card_suit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_segs_card_suit_exp[6] = segs_card_suit_expected_prev[6];
	end
	if (
		( value_expected_prev[0] !== 1'bx ) && ( value_prev[0] !== value_expected_prev[0] )
		&& ((value_expected_prev[0] !== last_value_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_value_exp[0] = value_expected_prev[0];
	end
	if (
		( value_expected_prev[1] !== 1'bx ) && ( value_prev[1] !== value_expected_prev[1] )
		&& ((value_expected_prev[1] !== last_value_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_value_exp[1] = value_expected_prev[1];
	end
	if (
		( value_expected_prev[2] !== 1'bx ) && ( value_prev[2] !== value_expected_prev[2] )
		&& ((value_expected_prev[2] !== last_value_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_value_exp[2] = value_expected_prev[2];
	end
	if (
		( value_expected_prev[3] !== 1'bx ) && ( value_prev[3] !== value_expected_prev[3] )
		&& ((value_expected_prev[3] !== last_value_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_value_exp[3] = value_expected_prev[3];
	end
	if (
		( value_expected_prev[4] !== 1'bx ) && ( value_prev[4] !== value_expected_prev[4] )
		&& ((value_expected_prev[4] !== last_value_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_value_exp[4] = value_expected_prev[4];
	end
	if (
		( value_expected_prev[5] !== 1'bx ) && ( value_prev[5] !== value_expected_prev[5] )
		&& ((value_expected_prev[5] !== last_value_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value_expected_prev);
		$display ("     Real value = %b", value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_value_exp[5] = value_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g58_testbed_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg deal_button;
reg disp_mode_left;
reg disp_mode_right;
reg [1:0] mode;
reg rst;
reg stack_button;
// wires                                               
wire empty;
wire full;
wire [5:0] num;
wire req_deal;
wire [6:0] segs_card_rank;
wire [6:0] segs_card_suit;
wire [5:0] value;

wire sampler;                             

// assign statements (if any)                          
g58_testbed i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.deal_button(deal_button),
	.disp_mode_left(disp_mode_left),
	.disp_mode_right(disp_mode_right),
	.empty(empty),
	.full(full),
	.mode(mode),
	.num(num),
	.req_deal(req_deal),
	.rst(rst),
	.segs_card_rank(segs_card_rank),
	.segs_card_suit(segs_card_suit),
	.stack_button(stack_button),
	.value(value)
);
// mode[ 1 ]
initial
begin
	mode[1] = 1'b1;
end 
// mode[ 0 ]
initial
begin
	mode[0] = 1'b0;
	mode[0] = #60000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// deal_button
initial
begin
	deal_button = 1'b1;
end 

// stack_button
initial
begin
	stack_button = 1'b0;
	stack_button = #10000 1'b1;
	stack_button = #20000 1'b0;
end 

// disp_mode_left
initial
begin
	disp_mode_left = 1'b0;
end 

// disp_mode_right
initial
begin
	disp_mode_right = 1'b1;
end 

g58_testbed_vlg_sample_tst tb_sample (
	.clk(clk),
	.deal_button(deal_button),
	.disp_mode_left(disp_mode_left),
	.disp_mode_right(disp_mode_right),
	.mode(mode),
	.rst(rst),
	.stack_button(stack_button),
	.sampler_tx(sampler)
);

g58_testbed_vlg_check_tst tb_out(
	.empty(empty),
	.full(full),
	.num(num),
	.req_deal(req_deal),
	.segs_card_rank(segs_card_rank),
	.segs_card_suit(segs_card_suit),
	.value(value),
	.sampler_rx(sampler)
);
endmodule

